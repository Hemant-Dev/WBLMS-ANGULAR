<!-- *ngIf="'Admin' === 'Admin'" -->

<div>
  <h2 style="text-align: center">{{ barChartTitle }}</h2>
  <div class="header">
    <div class="year-selector">
      <label for="yearSelect">Select Year:</label>
      <select
        id="yearSelect"
        [(ngModel)]="selectedYear"
        (change)="onYearChange(year)"
      >
        <option *ngFor="let year of availableYears" [value]="year">
          {{ year }}
        </option>
      </select>
    </div>
  </div>
  <div class="card" class="card">
    <p-chart type="bar" [data]="data" [options]="options" />
  </div>
</div>
<!-- <input type="select" value="2016" minlength="4" maxlength="4" /> -->
<!-- <p-dropdown
      [options]="searchByYears"
      [(ngModel)]="selectYear"
      name="selectYear"
      optionLabel="year"
      [showClear]="true"
      placeholder="Select a Year"
    ></p-dropdown> -->
<!-- <label for="selectYear" class="form-label">Search Year</label>
    <select
      name="selectYear"
      id="selectYear"
      class="form-select"
      [(ngModel)]="selectYear"
    >
      <option selected [value]="null">Select a Year</option>
      <option *ngFor="let year of searchByYears" [value]="year">
        {{ year }}
      </option>
    </select> -->

<div class="card mt-4">
  <p-table
    [value]="employeeData"
    selectionMode="single"
    [(selection)]="selectedEmployee"
    [scrollable]="true"
    scrollHeight="60vh"
    dataKey="id"
    [showCurrentPageReport]="true"
    currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
    [paginator]="true"
    [rows]="lazyRequest.rows"
    [first]="lazyRequest.first"
    [rowsPerPageOptions]="[5, 10, 15]"
    [lazy]="true"
    (onLazyLoad)="lazyLoadRequestData($event)"
    [totalRecords]="totalCount"
    [customSort]="true"
    (sortFunction)="lazyLoadRequestData($event)"
    [loading]="loading"
    loadingIcon="fa fa-spinner fa-spin"
    [tableStyle]="{ width: '100vw - 4rem' }"
    styleClass="my-spinner"
  >
    <ng-template pTemplate="caption">
      <!-- <i class="fa fa-search bg-success"></i> -->
      <div class="d-flex gap-4 mt-2">
        <h3 style="text-align: center">Employee Details</h3>
        <span class="p-input-icon-right p-float-label">
          <i class="fa-solid fa-search"></i>
          <input
            id="searchKeyword"
            type="text"
            [(ngModel)]="search"
            (ngModelChange)="getEmployeeAsync()"
            pInputText
          />
          <label for="searchKeyword">Search</label>
        </span>
      </div>
    </ng-template>
    <ng-template pTemplate="header">
      <tr>
        <!-- <th *ngFor="let col of tableHeader;let sortCol of tableSortColumn" pSortableColumn="{{sortCol}}">
          {{ col  }}
          <p-sortIcon field="{{sortCol}}"></p-sortIcon>
        </th> -->
        <th>Sr No.</th>
        <th pSortableColumn="firstName">
          First Name <p-sortIcon field="firstName"></p-sortIcon>
        </th>
        <th pSortableColumn="lastName">
          Last Name <p-sortIcon field="lastName"></p-sortIcon>
        </th>
        <th pSortableColumn="emailAddress">
          Email Address <p-sortIcon field="emailAddress"></p-sortIcon>
        </th>
        <th pSortableColumn="contactNumber">
          Contact number <p-sortIcon field="contactNumber"></p-sortIcon>
        </th>
        <th pSortableColumn="genderName">
          Gender <p-sortIcon field="genderName"></p-sortIcon>
        </th>
        <th pSortableColumn="roleName">
          Role <p-sortIcon field="roleName"></p-sortIcon>
        </th>
        <th pSortableColumn="managerName">
          Manager Name <p-sortIcon field="managerName"></p-sortIcon>
        </th>
        <th pSortableColumn="joiningDate">
          Joining Date <p-sortIcon field="joiningDate"></p-sortIcon>
        </th>
        <th pSortableColumn="leaveBalance">
          Balance Leave <p-sortIcon field="balanceLeaveRequest"></p-sortIcon>
        </th>
        <th pSortableColumn="totalLeaveRequest">
          Total Leave <p-sortIcon field="totalLeaveRequest"></p-sortIcon>
        </th>
      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-employee let-rowIndex="rowIndex">
      <tr
        tooltipPosition="right"
        [pSelectableRow]="employee"
        style="cursor: pointer"
        [ngClass]="{ row_active: 'row-active' }"
        (click)="
          getLeaveRequestByYearEmpId(
            employee.id,
            employee.firstName,
            employee.lastName
          )
        "
      >
        <td>{{ rowIndex + 1 }}</td>
        <td>{{ employee.firstName | htmlDecode }}</td>
        <td>{{ employee.lastName | htmlDecode }}</td>
        <td>{{ employee.emailAddress | htmlDecode }}</td>
        <td>{{ employee.contactNumber | htmlDecode }}</td>
        <td>{{ employee.genderName | htmlDecode }}</td>
        <td>{{ employee.roleName | htmlDecode }}</td>
        <td>{{ employee.managerName | htmlDecode }}</td>
        <td>{{ employee.joiningDate }}</td>
        <td>{{ employee.balanceLeaveRequest }}</td>
        <td>{{ employee.totalLeaveRequest }}</td>
      </tr>
    </ng-template>
  </p-table>
</div>

import {
  AfterViewChecked,
  ChangeDetectorRef,
  Component,
  OnInit,
} from '@angular/core';
import { TableLazyLoadEvent } from 'primeng/table';
import { errorAlert, errorToast } from 'src/app/Helpers/swal';
import { EmployeeLeaveReqModel } from 'src/app/Models/EmployeeLeaveReqModel';
import {
  LeaveReqByYearModel,
  LeaveRequestStatusModel,
} from 'src/app/Models/LeaveReqByYearModel';
import { EmployeeRxjsService } from 'src/app/Services/employee-rxjs.service';
import { LeaveRequestsService } from 'src/app/Services/leave-requests.service';

@Component({
  selector: 'app-show-all-employees',
  templateUrl: './show-all-employees.component.html',
  styleUrls: ['./show-all-employees.component.css'],
})
export class ShowAllEmployeesComponent implements OnInit, AfterViewChecked {
  data: any;
  options: any;
  dynaminBarThickness = 60;
  setBackgroundColor: any = 'rgb(153, 102, 255)'; //  ['rgba(255, 159, 64, 0.2)',] ;
  setBackgroundColor2: any = ['rgba(255, 101, 1, 0.2)'];
  setBackgroundColor3: any = ['rgba(55, 201, 101, 0.2)'];
  currentPage: number = 1;
  pageSize: number = 5;
  srNoIndex: number = (this.currentPage - 1) * 10 + 1;
  sortColumn: string = '';
  sortOrder: string = '';
  year: number = 2024;
  totalCount!: number;
  leaveRequestStatus!: LeaveRequestStatusModel[];
  leaveRequestByYear!: LeaveReqByYearModel;

  initialEmployeeData: EmployeeLeaveReqModel = {
    id: 0,
    firstName: '',
    lastName: '',
    emailAddress: '',
    contactNumber: '',
    roleId: 0,
    genderId: 0,
    genderName: '',
    roleName: '',
    managerId: 0,
    managerName: '',
    joiningDate: '',
    balanceLeaveRequest: 0,
    totalLeaveRequest: 0,
  };

  loading: boolean | undefined;
  todaysDate = new Date();
  currentYear: number = this.todaysDate.getFullYear();

  wonderbizFoundedInYear: number = 2011;
  // searchByYears: number[] = [];
  // selectYear!: number;
  // selectByYears!: number[];
  // getYears() {
  //   for (let year = this.wonderbizFoundedInYear; year <= this.currentYear; year++) {
  //     this.selectByYears.push(year)
  //   }
  //   console.log(this.searchByYears)
  // }

  appliedLeaveRequests: number[] = [];
  acceptedLeaveRequests: number[] = [];
  rejectedLeaveRequests: number[] = [];
  pendingLeaveRequests: number[] = [];

  availableYears: number[] = [];
  selectedYear: number = this.currentYear;

  initializeYears() {
    for (let year = this.wonderbizFoundedInYear; year <= this.currentYear; year++) {
      this.availableYears.push(year);
    }
  }
  onYearChange(year: number) {
    console.log(this.selectedYear)
    console.log(year)
    //this.getLeaveRequestByYear(0, 'Employee', '');

    this.getleaveRequestByYear(this.selectedYear);
  }

  employeeData: EmployeeLeaveReqModel[] = [];
  constructor(
    private employeeService: EmployeeRxjsService,
    private leaveReqService: LeaveRequestsService,
    private cdr: ChangeDetectorRef
  ) { }
  ngAfterViewChecked(): void {
    // this.cdr.detectChanges();
  }
  compareId = -100;
  selectedEmployee!: LeaveReqByYearModel;
  barChartTitle = 'Employees Leave request';
  row_active: boolean = false;

  ngOnInit(): void {
    debugger
    // this.getYears()
    this.initializeYears()
    console.log(this.currentYear);
    this.getleaveRequestByYear(this.year);
    // this.getEmployee();
    this.getEmployeeAsync();
    this.updateBarThickness();
    window.addEventListener('resize', this.updateBarThickness.bind(this));
  }

  getleaveRequestByYear2(
    employeeId: number = 1,
    firstName: string,
    lastName: string,
    year: number
  ) {
    this.leaveReqService
      .getLeaveRequestsByYear(employeeId, year)
      .subscribe({
        next: (response: any) => {
          this.row_active = true;
          console.log(response);
          this.leaveRequestByYear = response.data;
          this.acceptedLeaveRequests = [];
          this.rejectedLeaveRequests = [];
          this.appliedLeaveRequests = [];
          this.pendingLeaveRequests = [];
          Object.values(response.data).forEach((monthData: any) => {
            console.log(monthData.acceptedLeaveRequests);
            this.acceptedLeaveRequests.push(monthData.acceptedLeaveRequests);
            this.rejectedLeaveRequests.push(monthData.rejectedLeaveRequests);
            this.pendingLeaveRequests.push(monthData.pendingLeaveRequests);
            this.appliedLeaveRequests.push(monthData.appliedLeaveRequests);
          });
          this.barChart();
          // if (employeeId == this.compareId) {
          //   this.getLeaveRequestByYearEmpId(0, 'Employee', '');
          // } else {
          //   this.compareId = employeeId;
          // }
          this.barChartTitle = firstName + ' ' + lastName + ' Leave Requests';
        },
        error: (err) => {
          errorToast(err.error.errorMessages);
        },
      });
  }
  getleaveRequestByYear(
    year: number
  ) {
    this.getleaveRequestByYear2(1, 'Employee', '', year);
  }

  getLeaveRequestByYearEmpId(
    employeeId: number = 1,
    firstName: string,
    lastName: string
  ) {
    this.getleaveRequestByYear2(employeeId, firstName, lastName, this.year);
  }
  // getLeaveRequestByYear(
  //   employeeId: number = 1,
  //   firstName: string,
  //   lastName: string
  // ) {
  //   this.leaveReqService
  //     .getLeaveRequestsByYear(employeeId, this.year)
  //     .subscribe({
  //       next: (response: any) => {
  //         this.row_active = true;
  //         console.log(response);
  //         this.leaveRequestByYear = response.data;
  //         this.acceptedLeaveRequests = [];
  //         this.rejectedLeaveRequests = [];
  //         this.appliedLeaveRequests = [];
  //         this.pendingLeaveRequests = [];
  //         Object.values(response.data).forEach((monthData: any) => {
  //           console.log(monthData.acceptedLeaveRequests);

  //           this.acceptedLeaveRequests.push(monthData.acceptedLeaveRequests);
  //           this.rejectedLeaveRequests.push(monthData.rejectedLeaveRequests);
  //           this.pendingLeaveRequests.push(monthData.pendingLeaveRequests);
  //           this.appliedLeaveRequests.push(monthData.appliedLeaveRequests);
  //         });
  //         this.barChart();
  //         if (employeeId == this.compareId) {
  //           this.getLeaveRequestByYear(0, 'Employee', '');
  //         } else {
  //           this.compareId = employeeId;
  //         }
  //         this.barChartTitle = firstName + ' ' + lastName + ' Leave Requests';
  //       },
  //       error: (err) => {
  //         errorToast(err.error.errorMessages);
  //       },
  //     });
  // }
  // tableSortColumn = [
  //   "firstName",
  //   "lastName",
  //   "emailAddress",
  //   "contactNumber",
  //   "genderName",
  //   "roleName",
  //   "managerName",
  //   "joiningDate",
  //   "balanceLeaveRequest",
  //   "totalLeaveRequest"
  // ]

  // tableHeader = [
  //   'Sr. no.',
  //   'First Name',
  //   'Last Name',
  //   'Email Address',
  //   'Contact Number',
  //   'Gender',
  //   'Role Name',
  //   'Manager Name',
  //   'Joining Date',
  //   'Balance Leave',
  //   'Total Leave',
  // ];

  getEmployeeAsync() {
    this.employeeService
      .getEmployeesAsync(
        this.pageNumber,
        this.pageSize,
        this.lazyRequest.sortField,
        this.lazyRequest.sortOrder == 1 ? 'asc' : 'desc',
        this.search
      )
      .subscribe({
        next: (response: any) => {
          console.log(response);
          this.employeeData = response.data.dataArray;
          console.log(this.employeeData);
          this.totalCount = response.data.totalCount;
          this.loading = false;
          this.cdr.detectChanges();
        },
        error: (err) => {
          // console.log(err);
          if (err.status === 403) {
            errorAlert('Forbidden Request');
          } else {
            errorToast(err.error.errorMessages);
          }
        },
      });
  }

  lazyRequest = {
    first: 0,
    rows: 0,
    sortField: '',
    sortOrder: 1,
  };
  search = '';
  pageNumber: number = 1;

  lazyLoadRequestData($event: TableLazyLoadEvent) {
    this.loading = true;
    this.lazyRequest.first = $event.first || 0;
    this.lazyRequest.rows = $event.rows || 5;
    this.lazyRequest.sortField = $event.sortField?.toString() || '';
    this.lazyRequest.sortOrder = $event.sortOrder || 1;
    this.pageNumber = this.lazyRequest.first / this.lazyRequest.rows;
    this.pageNumber++;
    this.pageSize = this.lazyRequest.rows;

    setTimeout(() => {
      this.getEmployeeAsync();
    }, 1000);
  }

  updateBarThickness() {
    const width = window.innerWidth;
    if (width < 768) {
      this.dynaminBarThickness = 10;
    } else if (width < 1224) {
      this.dynaminBarThickness = 20;
    } else {
      this.dynaminBarThickness = 23;
    }
    this.barChart();
  }

  barChart() {
    const documentStyle = getComputedStyle(document.documentElement);
    const textColor = documentStyle.getPropertyValue('--text-color');
    const textColorSecondary = documentStyle.getPropertyValue(
      '--text-color-secondary'
    );
    const surfaceBorder = documentStyle.getPropertyValue('--surface-border');

    this.data = {
      labels: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'Octomber',
        'November',
        'December',
      ],
      datasets: [
        {
          type: 'bar',
          label: 'Accepted Leave Requests',

          backgroundColor: documentStyle.getPropertyValue('--green-700'), //this.setBackgroundColor3,//
          // data: [20, 25, 12, 48, 90, 76, 42, 50, 25, 12, 48, 90],
          data: this.acceptedLeaveRequests,
          barThickness: this.dynaminBarThickness, // Adjust this value to decrease bar width
        },
        {
          type: 'bar',
          label: 'Rejected Leaves Requests',
          backgroundColor: documentStyle.getPropertyValue('--red-600'),
          data: this.rejectedLeaveRequests,
          barThickness: this.dynaminBarThickness,
        },
        {
          type: 'bar',
          label: 'Pending Leaves Requests',
          backgroundColor: documentStyle.getPropertyValue('--yellow-400'),
          data: this.pendingLeaveRequests,
          barThickness: this.dynaminBarThickness,
        },
        {
          type: '',
          label: 'Total Leaves Requests',
          backgroundColor: documentStyle.getPropertyValue('--blue-500'),
          data: this.appliedLeaveRequests,
          barThickness: this.dynaminBarThickness,
        },
      ],
    };

    this.options = {
      maintainAspectRatio: false,
      aspectRatio: 1.0,
      plugins: {
        tooltip: {
          mode: 'index',
          intersect: true,
        },
        legend: {
          labels: {
            color: textColor,
          },
        },
      },
      // scales: {
      //   x: {
      //     stacked: true,
      //     ticks: {
      //       color: textColorSecondary,
      //     },
      //     grid: {
      //       display: false,
      //       color: surfaceBorder,
      //       drawBorder: false,
      //     },
      //   },
      //   y: {
      //     stacked: false,
      //     ticks: {
      //       color: textColorSecondary,
      //     },
      //     grid: {
      //       display: false,
      //       color: surfaceBorder,
      //       drawBorder: true,
      //     },
      //   },
      // },
      scales: {
        x: {
          ticks: {
            color: textColorSecondary,
            font: {
              weight: 500,
            },
          },
          grid: {
            color: surfaceBorder,
            drawBorder: true,
          },
        },
        y: {
          ticks: {
            color: textColorSecondary,
          },
          grid: {
            color: surfaceBorder,
            drawBorder: true,
          },
        },
      },
    };
  }
}
